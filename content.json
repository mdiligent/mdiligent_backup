{"meta":{"title":null,"subtitle":null,"description":null,"author":"Halo Wong","url":"http://yoursite.com"},"pages":[{"title":"是不俊鸭","date":"2019-01-14T02:48:25.000Z","updated":"2019-01-14T05:23:45.801Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"关于我 目前正在攻读电脑打字与报废回收专业，对 游戏开发 ， 人工智能 ， WEB开发 和等比较感兴趣，但是学不进去。 激励我的一句话博学而笃志,切问而近思！ 爱做这些事儿对网球、足球、羽毛球均有所涉猎，对篮球、乒乓球、游泳等有所了解，能快速分辨各类的球。喜欢唱歌，熟练朗读华语流行音乐的歌词，也具备初步的听歌识曲能力。 联系我问我我也不会啊！ Blog:https://mdiligent.github.io/ GitHub:mdiligent Email:hldg3366@163.com"},{"title":"categories","date":"2019-01-13T04:45:51.000Z","updated":"2019-01-13T04:46:16.833Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"��ǩ","date":"2019-01-13T03:14:39.000Z","updated":"2019-01-13T04:46:50.028Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"数据可视化之Matplotlib","slug":"数据可视化之Matplotlib","date":"2019-01-22T13:29:21.935Z","updated":"2019-01-22T13:33:11.988Z","comments":true,"path":"2019/01/22/数据可视化之Matplotlib/","link":"","permalink":"http://yoursite.com/2019/01/22/数据可视化之Matplotlib/","excerpt":"","text":"基础知识 pyplot是Matplotlib 软件包中子包，提供了一个类似MATLAB的绘图框架。导入 1import matplotlib.pyplot as plt figure图像123456789matplotlib.pyplot.figure(num=None, figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=&lt;class &apos;matplotlib.figure.Figure&apos;&gt;, clear=False, **kwargs)# num 图像标号# figsize ： 整数元组，可选，默认值：无，宽度，高度（英寸）。# dpi ： 整数，可选，默认值：无，这个数字的分辨率# facecolor：背景颜色。# edgecolor：边框颜色。# frameon ： bool，optional，默认值：True，如果为False，则禁止绘制图框。# FigureClass ：的 子类Figure（可选）使用自定义Figure实例。# clear ： bool，可选，默认值：False，如果为True并且该图已经存在，那么它将被清除。 绘图函数 1234plt.plot(x，y，fmt,scalex = True，scaley = True，data = None，** kwargs ）# x,y 数据点的水平/垂直坐标# fmt = &apos;[color][marker][line]&apos;颜色、标记和线条样式# scalex，scaley 默认值：True，这些参数确定视图限制是否适合数据限制。值将传递给autoscale_view。 绘制多个图可以两次调用plot函数或者在函数里传入多组参数。注意：如果为plot（）命令提供单个列表或数组，则matplotlib假定它是一系列y值，并自动为您生成x值。由于python范围以0开头，因此默认的x向量与y的长度相同，但以0开头。 使用Line2D属性作为关键字参数来更好地控制外观。行属性和fmt可以混合使用。以下两个调用产生相同的结果：123&gt;&gt;&gt; plot(x, y, &apos;go--&apos;, linewidth=2, markersize=12)&gt;&gt;&gt; plot(x, y, color=&apos;green&apos;, marker=&apos;o&apos;, linestyle=&apos;dashed&apos;,... linewidth=2, markersize=12) 设置坐标轴 123456plt.xlim((-1, 2)) #设置x坐标轴范围plt.ylim((-2, 3)) #设置y坐标轴范围plt.xlabel(&apos;I am x&apos;)#设置x坐标轴名称plt.ylabel(&apos;I am y&apos;)#设置x坐标轴名称plt.xticks() #设置x轴刻度，无参则不显示x轴plt.yticks #设置y轴刻度以及名称 使用plt.gca获取当前坐标轴信息. 使用.spines设置边框：右侧边框；使用.set_color设置边框颜色：默认白色； 使用.spines设置边框：上边框；使用.set_color设置边框颜色：默认白色； 使用.xaxis.set_ticks_position设置x坐标刻度数字或名称的位置：bottom.（所有位置：top，bottom，both，default，none） ax.xaxis.set_ticks_position(‘bottom’)使用.spines设置边框：x轴；使用.set_position设置边框位置：y=0的位置；（位置所有属性：outward，axes，data）（y轴类似） 图例 首先对图中的两条线绘制图例，设置两条线的类型等信息，用变量 l1 和 l2 分别存储起来. 而且需要注意的是 l1, l2,要以逗号结尾, 因为plt.plot() 返回的是一个列表。123456l1, = plt.plot(x, y1, label=&apos;linear line&apos;)l2, = plt.plot(x, y2, color=&apos;red&apos;, linewidth=1.0, linestyle=&apos;--&apos;, label=&apos;square line&apos;)plt.legend(handles=[l1, l2], labels=[&apos;up&apos;, &apos;down&apos;], loc=&apos;best&apos;)# handles线，依次对应labels的名称# labels 图例名称# loc图例的位置，’loc’参数有多种，’best’表示自动分配最佳位置 作图 柱状图 1234567891011121314151617181920import matplotlib.pyplot as pltimport numpy as npn = 12X = np.arange(n)Y1 = (1 - X / float(n)) * np.random.uniform(0.5, 1.0, n)Y2 = (1 - X / float(n)) * np.random.uniform(0.5, 1.0, n)plt.bar(X, +Y1)plt.bar(X, -Y2)plt.xlim(-.5, n)plt.xticks(())plt.ylim(-1.25, 1.25)plt.yticks(())#添加颜色plt.bar(X, +Y1, facecolor=&apos;#9999ff&apos;, edgecolor=&apos;white&apos;)plt.bar(X, -Y2, facecolor=&apos;#ff9999&apos;, edgecolor=&apos;white&apos;)# 添加数字for x, y in zip(X, Y2): plt.text(x + 0.4, -y - 0.05, &apos;%.2f&apos; % y, ha=&apos;center&apos;, va=&apos;top&apos;) 散点图 1234plt.scatter(X, Y, s=75, c=T, alpha=.5)#输入X和Y作为location，size=75，颜色为T，color map用默认值，透明度alpha 为 50%。 x轴显示范围定位(-1.5，1.5)，并用xtick()函数来隐藏x坐标轴，y轴同理。 填充颜色 1234567a = np.array([0.313660827978, 0.365348418405, 0.423733120134, 0.365348418405, 0.439599930621, 0.525083754405, 0.423733120134, 0.525083754405, 0.651536351379]).reshape(3,3)plt.imshow(a, interpolation=&apos;nearest&apos;, cmap=&apos;bone&apos;, origin=&apos;lower&apos;)#按照a数组填充颜色#出图方式，多种参数值可选plt.colorbar(shrink=.92) #添加颜色备注条 3D图 12345678910111213from mpl_toolkits.mplot3d import Axes3D #额外添加这个模块fig = plt.figure() #创建窗口ax = Axes3D(fig) #添加3D坐标轴X = np.arange(-4, 4, 0.25)Y = np.arange(-4, 4, 0.25)X, Y = np.meshgrid(X, Y) # x-y 平面的网格R = np.sqrt(X ** 2 + Y ** 2)Z = np.sin(R)x.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=plt.get_cmap(&apos;rainbow&apos;))#做出一个三维曲面，并将一个 colormap rainbow 填充颜色，其中，rstride 和 cstride 分别代表 row 和 column 的跨度。ax.contourf(X, Y, Z, zdir=&apos;z&apos;, offset=-2, cmap=plt.get_cmap(&apos;rainbow&apos;))#添加等高线，即在x/y轴上的投影 多图显示 1plt.subplot(a,b,c) #把figure分成a行b列，图画在第c个格，可以不要逗号 次坐标轴获取figure默认的坐标系 ax1 12fig, ax1 = plt.subplots()ax2 = ax1.twinx() #对ax1调用twinx()方法，生成如同镜面效果后的ax2 参考：莫烦PythonPyplot API","categories":[{"name":"实用技术","slug":"实用技术","permalink":"http://yoursite.com/categories/实用技术/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"数据科学","slug":"数据科学","permalink":"http://yoursite.com/tags/数据科学/"}]},{"title":"Pandas入门","slug":"Pandas入门","date":"2019-01-17T13:06:58.631Z","updated":"2019-01-17T13:08:17.972Z","comments":true,"path":"2019/01/17/Pandas入门/","link":"","permalink":"http://yoursite.com/2019/01/17/Pandas入门/","excerpt":"","text":"可以创建空系列，从ndarray、字典、标量等创建序列。12345pandas.Series( data, index, dtype, copy)#data 数据采取各种形式，如：ndarray，list，constants#index 索引值必须是唯一的和散列的，与数据的长度相同。 默认#np.arange(n)如果没有索引被传递。#dtype dtype用于数据类型。如果没有，将推断数据类型#copy 复制数据，默认为false。 数据帧(DataFrame)是二维数据结构，即数据以行和列的表格方式排列。123456pandas.DataFrame( data, index, columns, dtype, copy)# data 数据采取各种形式，如:ndarray，series，map，lists，dict，# # constant和另一个DataFrame。# index 对于行标签，要用于结果帧的索引是可选缺省值np.arrange(n)，如果没有传递索引值。# columns 对于列标签，可选的默认语法是 - np.arange(n)。 这只有在没有索引传递的情况下才是这样。# dtype 每列的数据类型。# copy 如果默认值为False，则此命令(或任何它)用于复制数据。 示例：123import pandas as pdd = &#123;&apos;one&apos; : pd.Series([1, 2, 3], index=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]), &apos;two&apos; : pd.Series([1, 2, 3, 4], index=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])&#125;#创建 列选择，列添加，列删除123print df [&apos;one&apos;] #选择名为one的列 df[&apos;three&apos;]=pd.Series([10,20,30],index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]) #添加three列del df[&apos;one&apos;] #删除one列 行选择，添加和删除 12print df.loc[&apos;b&apos;] #行标签传递给loc()函数来选择行print df.iloc[2] #整数位置传递给iloc()函数来选择行 行切片 1print df[2:4] 行删除 1df = df.drop(0) #删除0标签的行 使用append()函数将新行添加到DataFrame 1234567import pandas as pddf = pd.DataFrame([[1, 2], [3, 4]], columns = [&apos;a&apos;,&apos;b&apos;])df2 = pd.DataFrame([[5, 6], [7, 8]], columns = [&apos;a&apos;,&apos;b&apos;])df = df.append(df2)print df 遍历数据帧(DataFrame)中的行，可以使用以下函数 123iteritems() #迭代(key，value)对iterrows() # 将行迭代为(索引，系列)对itertuples() # 以namedtuples的形式迭代行 创建面板1234567pandas.Panel(data, items, major_axis, minor_axis, dtype, copy)#data 数据采取各种形式，如：ndarray，series，map，lists，dict，# #constant和另一个数据帧(DataFrame)#items axis=0#major_axis axis=1#minor_axis axis=2#dtype 每列的数据类型#copy 复制数据，默认 - false Major_axis和Minor_axis维。 常见属性：123456axes 返回行轴标签列表。dtype 返回对象的数据类型(dtype)。empty 如果系列为空，则返回True。ndim 返回底层数据的维数，默认定义：1。size 返回基础数据中的元素数。values 将系列作为ndarray返回。 常用方法：123456789101112131415head() 返回前n行。tail() 返回最后n行。sum(axis) 返回所请求轴的值的总和，默认情况下，轴为索引(axis=0列)。count() 非空观测数量mean() 所有值的平均值median() 所有值的中位数mode() 值的模值std() 值的标准偏差min() 所有值中的最小值max() 所有值中的最大值abs() 绝对值prod() 数组元素的乘积cumsum() 累计总和cumprod() 累计乘积describe()函数是用来计算有关DataFrame列的统计信息的摘要（就是可以计算好多个函数）。 排序12sort_index() #按标签排序sort_values() #是按值排序 字符串函数：调用时要加上str，例如： 12345import pandas as pdimport numpy as nps = pd.Series([&apos;Tom&apos;, &apos;William Rick&apos;, &apos;John&apos;, &apos;Alber@t&apos;, np.nan, &apos;1234&apos;,&apos;SteveMinsu&apos;])print (s.str.lower()) 12345678910111213141516171819lower() 将Series/Index中的字符串转换为小写。upper() 将Series/Index中的字符串转换为大写。len() 计算字符串长度。strip() 帮助从两侧的系列/索引中的每个字符串中删除空格(包括换行符)。split(&apos; &apos;) 用给定的模式拆分每个字符串。cat(sep=&apos; &apos;) 使用给定的分隔符连接系列/索引元素。get_dummies() 返回具有单热编码值的数据帧(DataFrame)。contains(pattern) 如果元素中包含子字符串，则返回每个元素的布尔值True，否则为False。replace(a,b) 将值a替换为值b。repeat(value) 重复每个元素指定的次数。count(pattern) 返回模式中每个元素的出现总数。startswith(pattern) 如果系列/索引中的元素以模式开始，则返回true。endswith(pattern) 如果系列/索引中的元素以模式结束，则返回true。find(pattern) 返回模式第一次出现的位置。findall(pattern) 返回模式的所有出现的列表。swapcase 变换字母大小写。islower() 检查系列/索引中每个字符串中的所有字符是否小写，返回布尔值isupper() 检查系列/索引中每个字符串中的所有字符是否大写，返回布尔值isnumeric() 检查系列/索引中每个字符串中的所有字符是否为数字，返回布尔值。 参考Pandas教程 图片源自网络，侵删！.","categories":[{"name":"实用技术","slug":"实用技术","permalink":"http://yoursite.com/categories/实用技术/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"数据科学","slug":"数据科学","permalink":"http://yoursite.com/tags/数据科学/"}]},{"title":"NumPy学习笔记","slug":"NumPy学习笔记","date":"2019-01-16T10:23:05.143Z","updated":"2019-01-16T10:31:18.716Z","comments":true,"path":"2019/01/16/NumPy学习笔记/","link":"","permalink":"http://yoursite.com/2019/01/16/NumPy学习笔记/","excerpt":"","text":"学习NumPy库，把一些重要的或者难的用法记录下来，方便复习。1.从数值范围创建数组 1numpy.arange(start, stop, step, dtype)#参数分别为起始值，终止值，步长和数据类型 2.创建等间隔一维数组 1np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)#参数分别为起始值，终止值，数据数，是否包含stop值，是否显示间距和数据类型 3.创建一个 ndarray 1234567numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)#object 数组或嵌套的数列#dtype 数组元素的数据类型，可选#copy 对象是否需要复制，可选#order 创建数组的样式，C为行方向，F为列方向，A为任意方向（默认）#subok 默认返回一个与基类类型一致的数组#ndmin 指定生成数组的最小维度 4.数据类型对象 (dtype) 1234numpy.dtype(object, align, copy)#object - 要转换为的数据类型对象#align - 如果为 true，填充字段使其类似 C 的结构体。#copy - 复制 dtype 对象 ，如果为 false，则是对内置数据类型对象的引用 注意：字节顺序是通过对数据类型预先设定”&lt;”或”&gt;”来决定的。”&lt;”意味着小端法(最小值存储在最小的地址，即低位组放在最前面)。”&gt;”意味着大端法(最重要的字节存储在最小的地址，即高位组放在最前面)。 NumPy 创建数组 1234numpy.empty(shape, dtype = float, order = &apos;C&apos;)#shape 数组形状#dtype 数据类型，可选#order 有&quot;C&quot;和&quot;F&quot;两个选项,分别代表，行优先和列优先，在计算机内存中的存储元素的顺序。 6.NumPy 从已有的数组创建数组 1234numpy.asarray(a, dtype = None, order = None)#a 任意形式的输入参数，可以是，列表, 列表的元组, 元组, 元组的元组, 元组的列表，多维数组#dtype 数据类型，可选#order 可选，有&quot;C&quot;和&quot;F&quot;两个选项,分别代表，行优先和列优先，在计算机内存中的存储元素的顺序。 使用数字 0 将一个全为 1 的 5x5 二维数组包围 12Z = np.ones((5,5))Z = np.pad(Z, pad_width=1, mode=&apos;constant&apos;, constant_values=0) 创建一个 5x5 的二维数组，并设置值 1, 2, 3, 4 落在其对角线下方Z = np.diag(1+np.arange(4),k=-1) 创建一个 10x10 的二维数组，并使得 1 和 0 沿对角线间隔放置 123Z = np.zeros((10,10),dtype=int)Z[1::2,::2] = 1Z[::2,1::2] = 1 创建一个 0-10 的一维数组，并将 (1, 9] 之间的数全部反转成负数 12Z = np.arange(11)Z[(1 &lt; Z) &amp; (Z &lt;= 9)] *= -1 找出两个一维数组中相同的元素 12345Z1 = np.random.randint(0,10,10)Z2 = np.random.randint(0,10,10)print(&quot;Z1:&quot;, Z1)print(&quot;Z2:&quot;, Z2)np.intersect1d(Z1,Z2) 统计数组各行的算术平均值 1np.mean(a, axis=1) 统计数组各列的加权平均值 1np.average(a, axis=0) 14.统计中位数，方差，标准差等。15.沿横 / 纵轴分割数组 12np.hsplit(a, 3)np.vsplit(a, 3) 16.返回每列最大值 1np.max(a, axis=0) #行最大值axis = 1 返回每列最大值索引 1np.argmax(a, axis=0) #最小值是argmin函数 18.找出两个一维数组中相同的元素np.intersect1d(Z1,Z2)19.使用 NumPy 打印昨天、今天、明天的日期 123456yesterday = np.datetime64(&apos;today&apos;, &apos;D&apos;) - np.timedelta64(1, &apos;D&apos;)today = np.datetime64(&apos;today&apos;, &apos;D&apos;)tomorrow = np.datetime64(&apos;today&apos;, &apos;D&apos;) + np.timedelta64(1, &apos;D&apos;)print(&quot;yesterday: &quot;, yesterday)print(&quot;today: &quot;, today)print(&quot;tomorrow: &quot;, tomorrow) 20.数组排序 12Z.sort()#升序排序Z.sort(axis=0)#列升序 21.将 float32 转换为整型 12Z = np.arange(10, dtype=np.float32)Z = Z.astype(np.int32, copy=False) 22.将随机二维数组按照第 3 列从上到下进行升序排列 12Z = np.random.randint(0,10,(5,5))#生成一个5行5列数值在0~10之间的数组Z[Z[:,2].argsort()] 23.交换前两行可以直接这样吗?1A[[0,1]] = A[[1,0]] 24.找出随机一维数组Z中出现频率最高的值1np.bincount(Z).argmax() 25.统计随机数组中的各元素的数量 12Z = np.random.randint(0,100,25).reshape(5,5)np.unique(Z, return_counts=True) # 返回值中，第 2 个数组对应第 1 个数组元素的数量 26.将多个 1 维数组拼合为单个 Ndarray12Z = np.array([Z1, Z2, Z3])np.concatenate(Z) 27.使用 NumPy 计算变量直接的相关性系数12345Z = np.array([ [1, 2, 1, 9, 10, 3, 2, 6, 7], # 特征 A [2, 1, 8, 3, 7, 5, 10, 7, 2], # 特征 B [2, 1, 1, 8, 9, 4, 3, 5, 7]]) # 特征 Cnp.corrcoef(Z) 28.使用 NumPy 计算矩阵的特征值和特征向量 123M = np.matrix([[1,2,3], [4,5,6], [7,8,9]])w, v = np.linalg.eig(M)# w 对应特征值，v 对应特征向量 29.打印九九乘法表 1np.fromfunction(lambda i, j: (i + 1) * (j + 1), (9, 9)) 30.使用 Numpy 将实验楼 LOGO 转换为 Ndarray 数组 12345678910111213141516171819from io import BytesIOfrom PIL import Imageimport PIL, requests# 通过链接下载图像URL = &apos;https://static.shiyanlou.com/img/logo-black.png&apos;response = requests.get(URL)# 将内容读取为图像I = Image.open(BytesIO(response.content))# 将图像转换为 Ndarrayshiyanlou = np.asarray(I)shiyanlou# 将转换后的 Ndarray 重新绘制成图像from matplotlib import pyplot as plt%matplotlib inlineplt.imshow(shiyanlou)plt.show() 31.几个常用的函数12345678910111213141516171819202122232425flat #返回np.nonzero([1,0,2,0,1,0,4,0])#返回一维数组中非 0 元素的位置索引np.dot(A, B)#矩阵相乘np.power(x,4)#对x数组的每个值4次方np.set_printoptions(precision=2)#对于二维随机数组中各元素，保留其 2 位小数Z/1e3#科学记数法输出 NumPy（Z） 数组a.argsort()#打印各元素在数组中升序排列的索引a.real #属性，数组a的实部a.imag #属性，数组a的虚部numpy.linalg.inv()# 函数计算矩阵的乘法逆矩阵。numpy.linalg.solve() #函数给出了矩阵形式的线性方程的解。umpy.matlib.eye() #函数返回一个矩阵，对角线元素为 1，其他位置为零。np.c_[M1, M2]#按列连接两个数组np.r_[M1, M2]#按行连接两个数组 32.数组属性 123456789ndarray.ndim 秩，即轴的数量或维度的数量ndarray.shape 数组的维度，对于矩阵，n 行 m 列ndarray.size 数组元素的总个数，相当于 .shape 中 n*m 的值ndarray.dtype ndarray 对象的元素类型ndarray.itemsize ndarray 对象中每个元素的大小，以字节为单位ndarray.flags ndarray 对象的内存信息ndarray.real ndarray元素的实部ndarray.imag ndarray 元素的虚部ndarray.data 包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性。 参考：实验楼NumPy 百题大冲关NumPy教程","categories":[{"name":"实用技术","slug":"实用技术","permalink":"http://yoursite.com/categories/实用技术/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"数据科学","slug":"数据科学","permalink":"http://yoursite.com/tags/数据科学/"}]},{"title":"Git基本操作","slug":"Git基本操作","date":"2019-01-15T13:52:48.145Z","updated":"2019-01-15T13:52:50.760Z","comments":true,"path":"2019/01/15/Git基本操作/","link":"","permalink":"http://yoursite.com/2019/01/15/Git基本操作/","excerpt":"","text":"Git基本操作 配置用户名和邮箱地址。 12$ git config --global user.name[username]- 全局用户$ git config --global user.email [你的电子邮件地址]- 全局用户,注意没有[] 在一个新文件夹下 $ git init #初始化一个本地存储库，会生成.git这个子目录 ls -a #显示当前文件或目录的内容，包括隐藏文件 从远程存储库拷贝贝一个Git仓库到本地git clone [url]#自己能够查看该项目，或者进行修改。 123git add #命令可将该文件添加到缓存git status #命令用于查看项目的当前状态。git commit #将缓存区内容添加到仓库中。 执行git diff来查看执行git status的结果的详细信息（新手不是很常用）。 1234git diff #尚未缓存的改动git diff --cached #查看已缓存的改动git diff HEAD #查看已缓存的与未缓存的所有改动diff：git diff --stat #显示摘要而非整个 git reset HEAD命令用于取消已缓存的内容。 如果只是简单地从工作目录中手工删除文件，运行git status时就会在未提交提交的提示。 要从Git中移除某个文件，就必须要从已跟踪文件清单中移除，然后提交。可以用以下命令完成此项工作 git rm &lt;文件&gt; 如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项-f 1git rm -f &lt;file&gt;- f &lt;file&gt; git log 命令列出历史提交记录。 如果把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用–cached选项即可 1git rm --cached &lt;file&gt;- 缓存&lt;file&gt; git mv [原文件名] [新文件名]命令用于移动或重命名一个文件，目录，软连接 $ git commit -m &quot;添加 README.md 文件&quot; # 提交并备注信息 Git 分支管理1234git branch (branchname) #创建分支git checkout (branchname) #切换分支git merge #合并分支git branch -d (branchname)#删除分支 使用GitHubgit remote add [shortname] [url] #要添加一个新的远程仓库 本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以我们需要配置验证信息： 使用以下命令生成SSH Key： 1$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 查看命令行上显示的.ssh文件夹位置，进去，打开 id_rsa.pub，复制里面的 key。回到 github 上，进入 Account =&gt; Settings（账户配置）。边选择 SSH and GPG keys，然后点击 New SSH key 按钮,title 设置标题，可以随便填，粘贴在你电脑上生成的 key。1$ ssh -T git@github.com #验证是否成功 12$ git fetch [远程仓库名] #从远程仓库下载新分支与数据cat README.md # 查看 README.md 文件内容 git push [alias] [branch] #推送你的新分支与数据到某个远端仓库命令 git remote rm [别名] #删除远程仓库 将远程存储库中的更改合并到当前分支中。在默认模式下，git pull是git fetch后跟git merge FETCH_HEAD的缩写。实例： 123456789101112131415$ mkdir runoob-git-test # 创建测试目录$ cd runoob-git-test/ # 进入测试目录$ echo &quot;测试&quot; &gt;&gt; README.md # 创建 README.md 文件并写入内容$ ls # 查看目录下的文件README$ git init # 初始化$ git add README.md # 添加文件$ git commit -m &quot;添加 README.md 文件&quot; # 提交并备注信息[master (root-commit) 0205aab] 添加 README.md 文件 1 file changed, 1 insertion(+) create mode 100644 README.md# 提交到 Github$ git remote add origin git@github.com:tianqixin/runoob-git-test.git$ git push -u origin master 参考：Git教程|菜鸟教程 图片来自网络，侵删。","categories":[{"name":"实用技术","slug":"实用技术","permalink":"http://yoursite.com/categories/实用技术/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"用Hexo在github上搭建个人博客","slug":"用hexo在github上搭建个人博客","date":"2019-01-14T02:33:49.662Z","updated":"2019-01-14T02:54:37.417Z","comments":true,"path":"2019/01/14/用hexo在github上搭建个人博客/","link":"","permalink":"http://yoursite.com/2019/01/14/用hexo在github上搭建个人博客/","excerpt":"","text":"1.（这一步可以不做）下载node.js（msn版），全选安装，已经加到path了，还自带了npm，参考博客园的一篇文章 ，把npm下载的默认文件夹位置修改了。在nodejs文件夹下新建【node_global】及【node_cache】两个文件夹，创建完两 个空文件夹之后，打开cmd命令窗口，输入下边的代码，把路径替换成你建的两个文件夹路径 1234npm config set prefix &quot;D:\\Develop\\nodejs\\node_global&quot;npm config set cache &quot;D:\\Develop\\nodejs\\node_cache&quot; 修改环境变量在【系统变 量】下新建【NODE_PATH】，输入【D:\\Develop\\nodejs\\node_global\\node_modules】，将【用户变量】下的【Path】修改 为【D:\\Develop\\nodejs\\node_global】路径同样是你自己的路径。 2.可能在安装hexo等的时候会经常卡住，推荐换成 淘宝的源，打开cmd输入 npm config set registry https://registry.npm.taobao.org配置后可通过下面方式来验证是否 成功 npm config get registry 或npm info express。 3.在node.js目录下安装hexo，有博主推荐hexo也有hexo-cli，两 者的区别可以自行百度哦，没有配置环境变量导致不能使用hexo命令行。我自己刚开始下的hexo-cli配置环境变量老是出 错反正。进入NodeJS的安装目录，输入 1npm install -g hexo 可能需要添加环境变量，根据你的文件位置，类似C: \\ProgramFiles\\nodejs\\node_global\\node_modules\\hexo\\node_modules.bin主要是后边的node_modules.bin要一致。 4. 新建一个文件夹用来存放博客，在这个文件夹下打开命令行，依次输入 1234hexo initnpm installhexo ghexo s 如果 hexo s有错误，可能是没安装server，可以npm install hexo-server –save。 访问http://localhost:4000即可看到你的 博客。 5.在github新建一个存储库，名称一定要为username.github.io，进入settings选择githubpages，要先选择主题才 能启用githubpages。更换主题，https://hexo.io/themes/在上边选好主题，照着做克隆下来，根据教程修改thems里的 config文件好了。 不管配置哪个config文件都要有键值对之间冒号后都要有空格。站点config.yml文件要添加 注意：好像 是先在文章里贴标签，才在分类里有标签，而不是先设置标签供选择。 参考博客：https://www.cnblogs.com/dantefung/p/d8c48ba8030bcab7cfc364d423186fee.html https://blog.csdn.net/edxuanlen/article/details/79154116 https://www.cnblogs.com/liuxianan/p/build-blog- website-by-hexo-github.html https://blog.csdn.net/tonydandelion2014/article/details/61615898 https://www.cnblogs.com/jackyroc/p/7681938.html https://www.cnblogs.com/dantefung/p/d8c48ba8030bcab7cfc364d423186fee.html https://www.cnblogs.com/trista222/p/8017300.html","categories":[{"name":"实用技术","slug":"实用技术","permalink":"http://yoursite.com/categories/实用技术/"}],"tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://yoursite.com/tags/博客搭建/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-01-12T09:42:24.633Z","updated":"2019-01-12T09:42:24.633Z","comments":true,"path":"2019/01/12/hello-world/","link":"","permalink":"http://yoursite.com/2019/01/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}